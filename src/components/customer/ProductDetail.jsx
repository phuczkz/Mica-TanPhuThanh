import React, { useState, useEffect, useCallback } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { getProducts } from "../../services/productService";
import { getCategories } from "../../services/categoryService";
// import { Header } from "../common/Header";
import "../../styles/ProductDetail.css";

export function ProductDetail() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [product, setProduct] = useState(null);
  const [category, setCategory] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedImage, setSelectedImage] = useState(0);
  const [quantity, setQuantity] = useState(1);
  const [showImageModal, setShowImageModal] = useState(false);
  const [isAutoPlay, setIsAutoPlay] = useState(false);
  const [autoPlayInterval, setAutoPlayInterval] = useState(null);
  const [showNotification, setShowNotification] = useState(false);

  useEffect(() => {
    const fetchProductDetail = async () => {
      try {
        const [productsData, categoriesData] = await Promise.all([
          getProducts(),
          getCategories(),
        ]);

        const foundProduct = productsData.find((p) => p.id === id);
        if (!foundProduct) {
          setError("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m");
          return;
        }

        const foundCategory = categoriesData.find(
          (c) => c.id === foundProduct.category
        );

        setProduct(foundProduct);
        setCategory(foundCategory);
      } catch (err) {
        setError("C√≥ l·ªói khi t·∫£i th√¥ng tin s·∫£n ph·∫©m");
        console.error("Error fetching product:", err);
      } finally {
        setLoading(false);
      }
    };

    fetchProductDetail();
  }, [id]);

  // Auto play slideshow - FIX: S·ª≠ d·ª•ng useCallback ƒë·ªÉ tr√°nh re-render kh√¥ng c·∫ßn thi·∫øt
  useEffect(() => {
    if (isAutoPlay && product) {
      const allImages = [
        product.imageBase64,
        ...(product.additionalImages?.map((img) => img.base64) || []),
      ].filter(Boolean);

      if (allImages.length > 1) {
        // Clear interval c≈© tr∆∞·ªõc khi t·∫°o m·ªõi
        if (autoPlayInterval) {
          clearInterval(autoPlayInterval);
        }

        const interval = setInterval(() => {
          setSelectedImage((prev) =>
            prev >= allImages.length - 1 ? 0 : prev + 1
          );
        }, 3000);

        setAutoPlayInterval(interval);

        return () => {
          clearInterval(interval);
        };
      }
    } else {
      if (autoPlayInterval) {
        clearInterval(autoPlayInterval);
        setAutoPlayInterval(null);
      }
    }
    // FIX: Lo·∫°i b·ªè selectedImage kh·ªèi dependency array ƒë·ªÉ tr√°nh reset interval li√™n t·ª•c
  }, [isAutoPlay, product, autoPlayInterval]);

  // FIX: S·ª≠ d·ª•ng useCallback cho handleKeyDown
  const handleKeyDown = useCallback((e) => {
    if (e.key === "Escape") {
      setShowImageModal(false);
      setShowNotification(false);
    }
  }, []); // Kh√¥ng c√≥ dependencies v√¨ ch·ªâ c·∫ßn check key

  const handleQuantityChange = (change) => {
    const newQuantity = quantity + change;
    if (newQuantity >= 1) {
      setQuantity(newQuantity);
    }
  };

  const handleAddToCart = () => {
    setShowNotification(true);
  };

  const handleBuyNow = () => {
    setShowNotification(true);
  };

  const handleImageClick = () => {
    setShowImageModal(true);
  };

  const closeImageModal = () => {
    setShowImageModal(false);
  };

  const toggleAutoPlay = () => {
    setIsAutoPlay(!isAutoPlay);
  };

  const handleThumbnailClick = (index) => {
    setSelectedImage(index);
    setIsAutoPlay(false); // D·ª´ng auto play khi user click
  };

  const closeNotification = () => {
    setShowNotification(false);
  };

  // FIX: Th√™m handleKeyDown v√†o dependency array
  useEffect(() => {
    if (showImageModal || showNotification) {
      document.addEventListener("keydown", handleKeyDown);
      document.body.style.overflow = "hidden";
    } else {
      document.removeEventListener("keydown", handleKeyDown);
      document.body.style.overflow = "unset";
    }

    return () => {
      document.removeEventListener("keydown", handleKeyDown);
      document.body.style.overflow = "unset";
    };
  }, [showImageModal, showNotification, handleKeyDown]); // FIX: Th√™m handleKeyDown

  // Cleanup interval khi component unmount
  useEffect(() => {
    return () => {
      if (autoPlayInterval) {
        clearInterval(autoPlayInterval);
      }
    };
  }, [autoPlayInterval]);

  if (loading) {
    return (
      <div>
        <div className="loading-container">
          <div className="loading">ƒêang t·∫£i th√¥ng tin s·∫£n ph·∫©m...</div>
        </div>
      </div>
    );
  }

  if (error || !product) {
    return (
      <div>
        <div className="error-container">
          <div className="error-message">
            <h2>‚ùå {error || "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m"}</h2>
            <button onClick={() => navigate("/")} className="btn-back">
              ‚Üê Quay l·∫°i trang ch·ªß
            </button>
          </div>
        </div>
      </div>
    );
  }

  // T·∫°o m·∫£ng ·∫£nh (·∫£nh ch√≠nh + ·∫£nh b·ªï sung)
  const allImages = [
    product.imageBase64,
    ...(product.additionalImages?.map((img) => img.base64) || []),
  ].filter(Boolean);

  return (
    <div>
      <div className="product-detail-container">
        <div className="breadcrumb">
          <span onClick={() => navigate("/")} className="breadcrumb-link">
            Trang ch·ªß
          </span>
          <span className="breadcrumb-separator"> ‚Ä∫ </span>
          {category && (
            <>
              <span className="breadcrumb-item">{category.name}</span>
              <span className="breadcrumb-separator"> ‚Ä∫ </span>
            </>
          )}
          <span className="breadcrumb-current">{product.name}</span>
        </div>

        <div className="product-detail-content">
          {/* Ph·∫ßn ·∫£nh s·∫£n ph·∫©m */}
          <div className="product-images">
            <div className="main-image" onClick={handleImageClick}>
              {allImages.length > 0 ? (
                <img
                  src={allImages[selectedImage]}
                  alt={product.name}
                  className="main-product-image"
                />
              ) : (
                <div className="no-main-image">Kh√¥ng c√≥ ·∫£nh</div>
              )}
              {/* Navigation arrows */}
              {allImages.length > 1 && (
                <div className="image-navigation">
                  <button
                    className="nav-btn prev-btn"
                    onClick={(e) => {
                      e.stopPropagation();
                      setSelectedImage(
                        selectedImage > 0
                          ? selectedImage - 1
                          : allImages.length - 1
                      );
                      setIsAutoPlay(false);
                    }}
                  >
                    &#8249;
                  </button>
                  <button
                    className="nav-btn next-btn"
                    onClick={(e) => {
                      e.stopPropagation();
                      setSelectedImage(
                        selectedImage < allImages.length - 1
                          ? selectedImage + 1
                          : 0
                      );
                      setIsAutoPlay(false);
                    }}
                  >
                    &#8250;
                  </button>
                </div>
              )}
              {allImages.length > 0 && (
                <div className="zoom-hint">üîç Click ƒë·ªÉ xem ·∫£nh l·ªõn</div>
              )}
              {allImages.length > 1 && (
                <div className="image-controls">
                  <button
                    className={`auto-play-btn ${isAutoPlay ? "active" : ""}`}
                    onClick={(e) => {
                      e.stopPropagation();
                      toggleAutoPlay();
                    }}
                    title={
                      isAutoPlay ? "T·∫Øt t·ª± ƒë·ªông chuy·ªÉn" : "B·∫≠t t·ª± ƒë·ªông chuy·ªÉn"
                    }
                  >
                    {isAutoPlay ? "‚è∏Ô∏è" : "‚ñ∂Ô∏è"}
                  </button>
                  <div className="image-counter">
                    {selectedImage + 1} / {allImages.length}
                  </div>
                </div>
              )}
            </div>

            {allImages.length > 1 && (
              <div className="image-thumbnails">
                {allImages.map((image, index) => (
                  <img
                    key={index}
                    src={image}
                    alt={`${product.name} ${index + 1}`}
                    className={`thumbnail ${
                      selectedImage === index ? "active" : ""
                    }`}
                    onClick={() => handleThumbnailClick(index)}
                  />
                ))}
              </div>
            )}
          </div>

          {/* Th√¥ng tin s·∫£n ph·∫©m */}
          <div className="product-info">
            {category && (
              <div className="product-category-badge">{category.name}</div>
            )}

            <h1 className="product-title">{product.name}</h1>

            <div className="product-price-section">
              <span className="current-price">
                {product.price?.toLocaleString("vi-VN")} VND
              </span>
              <div className="stock-status">
                <span
                  className={`stock-badge ${
                    product.inStock !== false ? "in-stock" : "out-stock"
                  }`}
                >
                  {product.inStock !== false ? "‚úÖ C√≤n h√†ng" : "‚ùå H·∫øt h√†ng"}
                </span>
              </div>
            </div>

            {/* Th√¥ng tin chi ti·∫øt */}
            {(product.productCode ||
              product.brand ||
              product.origin ||
              product.size ||
              product.color ||
              product.material ||
              product.weight ||
              product.warranty) && (
              <div className="product-specifications">
                <h3>üìã Th√¥ng tin c∆° b·∫£n:</h3>
                <div className="spec-grid">
                  {product.productCode && (
                    <div className="spec-item">
                      <span className="spec-label">M√£ s·∫£n ph·∫©m:</span>
                      <span className="spec-value">{product.productCode}</span>
                    </div>
                  )}
                  {product.brand && (
                    <div className="spec-item">
                      <span className="spec-label">Th∆∞∆°ng hi·ªáu:</span>
                      <span className="spec-value">{product.brand}</span>
                    </div>
                  )}
                  {product.origin && (
                    <div className="spec-item">
                      <span className="spec-label">Xu·∫•t x·ª©:</span>
                      <span className="spec-value">{product.origin}</span>
                    </div>
                  )}
                  {product.size && (
                    <div className="spec-item">
                      <span className="spec-label">K√≠ch th∆∞·ªõc:</span>
                      <span className="spec-value">{product.size}</span>
                    </div>
                  )}
                  {product.color && (
                    <div className="spec-item">
                      <span className="spec-label">M√†u s·∫Øc:</span>
                      <span className="spec-value">{product.color}</span>
                    </div>
                  )}
                  {product.material && (
                    <div className="spec-item">
                      <span className="spec-label">Ch·∫•t li·ªáu:</span>
                      <span className="spec-value">{product.material}</span>
                    </div>
                  )}
                  {product.weight && (
                    <div className="spec-item">
                      <span className="spec-label">Tr·ªçng l∆∞·ª£ng:</span>
                      <span className="spec-value">{product.weight}</span>
                    </div>
                  )}
                  {product.warranty && (
                    <div className="spec-item">
                      <span className="spec-label">B·∫£o h√†nh:</span>
                      <span className="spec-value">{product.warranty}</span>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Ch·ªçn s·ªë l∆∞·ª£ng v√† mua h√†ng */}
            {product.inStock !== false && (
              <div className="purchase-section">
                <div className="quantity-selector">
                  <label>S·ªë l∆∞·ª£ng:</label>
                  <div className="quantity-controls">
                    <button
                      onClick={() => handleQuantityChange(-1)}
                      className="quantity-btn"
                      disabled={quantity <= 1}
                    >
                      -
                    </button>
                    <span className="quantity-display">{quantity}</span>
                    <button
                      onClick={() => handleQuantityChange(1)}
                      className="quantity-btn"
                    >
                      +
                    </button>
                  </div>
                </div>

                <div className="action-buttons">
                  <button
                    onClick={handleAddToCart}
                    className="btn btn-add-cart"
                  >
                    üõí Th√™m v√†o gi·ªè h√†ng
                  </button>
                  <button onClick={handleBuyNow} className="btn btn-buy-now">
                    üí∞ Mua ngay
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* M√¥ t·∫£ s·∫£n ph·∫©m */}
        {product.description && (
          <div className="product-description-section">
            <h3>üìù M√¥ t·∫£ s·∫£n ph·∫©m</h3>
            <div className="product-description">{product.description}</div>
          </div>
        )}

        {/* N√∫t quay l·∫°i */}
        <div className="back-button-section">
          <button onClick={() => navigate("/")} className="btn-back">
            ‚Üê Quay l·∫°i trang ch·ªß
          </button>
        </div>

        {/* Image Modal */}
        {showImageModal && allImages.length > 0 && (
          <div className="image-modal" onClick={closeImageModal}>
            <div className="image-modal-content">
              <span className="image-modal-close" onClick={closeImageModal}>
                &times;
              </span>
              <img
                src={allImages[selectedImage]}
                alt={product.name}
                className="modal-image"
                onClick={(e) => e.stopPropagation()}
              />
              <div className="modal-image-info">
                <p>{product.name}</p>
                {allImages.length > 1 && (
                  <p>
                    ·∫¢nh {selectedImage + 1} / {allImages.length}
                  </p>
                )}
              </div>
              {allImages.length > 1 && (
                <div className="modal-navigation">
                  <button
                    className="modal-nav-btn prev"
                    onClick={(e) => {
                      e.stopPropagation();
                      setSelectedImage(
                        selectedImage > 0
                          ? selectedImage - 1
                          : allImages.length - 1
                      );
                    }}
                  >
                    &#8249;
                  </button>
                  <button
                    className="modal-nav-btn next"
                    onClick={(e) => {
                      e.stopPropagation();
                      setSelectedImage(
                        selectedImage < allImages.length - 1
                          ? selectedImage + 1
                          : 0
                      );
                    }}
                  >
                    &#8250;
                  </button>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Notification Modal */}
        {showNotification && (
          <div className="notification-modal" onClick={closeNotification}>
            <div
              className="notification-content"
              onClick={(e) => e.stopPropagation()}
            >
              <div className="notification-icon">
                <div className="icon-circle">
                  <svg
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L15 1H5C3.89 1 3 1.89 3 3V21C3 22.1 3.89 23 5 23H19C20.1 23 21 22.1 21 21V9ZM19 21H5V3H14V9H19V21Z"
                      fill="currentColor"
                    />
                  </svg>
                </div>
              </div>

              <div className="notification-header">
                <h3>Th√¥ng b√°o quan tr·ªçng</h3>
                <button
                  className="notification-close"
                  onClick={closeNotification}
                  aria-label="ƒê√≥ng th√¥ng b√°o"
                >
                  <svg
                    width="18"
                    height="18"
                    viewBox="0 0 24 24"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M18 6L6 18M6 6L18 18"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                </button>
              </div>

              <div className="notification-body">
                <h4>C·ª≠a h√†ng Mica T·∫•n Ph√∫ Th√†nh</h4>
                <p>
                  C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m ƒë·∫øn s·∫£n ph·∫©m c·ªßa ch√∫ng t√¥i! ƒê·ªÉ ƒë∆∞·ª£c t∆∞
                  v·∫•n chi ti·∫øt v√† mua h√†ng v·ªõi gi√° t·ªët nh·∫•t, b·∫°n vui l√≤ng gh√©
                  thƒÉm c·ª≠a h√†ng tr·ª±c ti·∫øp ho·∫∑c li√™n h·ªá t·ªõi s·ªë ƒëi·ªán tho·∫°i
                  <strong> 0909 123 456</strong>. Ch√∫ng t√¥i lu√¥n s·∫µn s√†ng
                  h·ªó tr·ª£ b·∫°n 24/7.
                </p>
                <div className="notification-features">
                  <div className="feature-item">
                    <span className="feature-icon">‚úÖ</span>
                    <span>T∆∞ v·∫•n mi·ªÖn ph√≠</span>
                  </div>
                  <div className="feature-item">
                    <span className="feature-icon">üéØ</span>
                    <span>Gi√° c·∫£ c·∫°nh tranh</span>
                  </div>
                  <div className="feature-item">
                    <span className="feature-icon">üöö</span>
                    <span>H·ªó tr·ª£ v·∫≠n chuy·ªÉn</span>
                  </div>
                </div>
              </div>

              <div className="notification-footer">
                <button
                  className="btn btn-notification-secondary"
                  onClick={closeNotification}
                >
                  ƒê·ªÉ sau
                </button>
                <button
                  className="btn btn-notification-primary"
                  onClick={closeNotification}
                >
                  ƒê√£ hi·ªÉu
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
