import { useState, useEffect, useCallback } from "react";
import { getProducts, deleteProduct } from "../../services/productService";
import { getCategories } from "../../services/categoryService";

export function ProductList({ onEdit }) {
  const [allProducts, setAllProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);

  const [searchName, setSearchName] = useState("");
  const [categoryFilter, setCategoryFilter] = useState("");
  const [priceFilter, setPriceFilter] = useState("");
  const [sortBy, setSortBy] = useState("");

  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ tr√°nh dependency warning
  const filterProducts = useCallback(() => {
    let filtered = [...allProducts];

    if (searchName.trim()) {
      filtered = filtered.filter((product) =>
        product.name.toLowerCase().includes(searchName.toLowerCase().trim())
      );
    }

    if (categoryFilter) {
      filtered = filtered.filter(
        (product) => product.category === categoryFilter
      );
    }

    if (priceFilter) {
      const [minPrice, maxPrice] = priceFilter.split("-").map(Number);
      filtered = filtered.filter(
        (product) => product.price >= minPrice && product.price <= maxPrice
      );
    }

    if (sortBy) {
      switch (sortBy) {
        case "name-asc":
          filtered.sort((a, b) => a.name.localeCompare(b.name));
          break;
        case "name-desc":
          filtered.sort((a, b) => b.name.localeCompare(a.name));
          break;
        case "price-asc":
          filtered.sort((a, b) => a.price - b.price);
          break;
        case "price-desc":
          filtered.sort((a, b) => b.price - a.price);
          break;
        case "newest":
          filtered.sort((a, b) => {
            const dateA = a.createdAt?.toDate
              ? a.createdAt.toDate()
              : new Date(a.createdAt || 0);
            const dateB = b.createdAt?.toDate
              ? b.createdAt.toDate()
              : new Date(b.createdAt || 0);
            return dateB - dateA;
          });
          break;
        case "oldest":
          filtered.sort((a, b) => {
            const dateA = a.createdAt?.toDate
              ? a.createdAt.toDate()
              : new Date(a.createdAt || 0);
            const dateB = b.createdAt?.toDate
              ? b.createdAt.toDate()
              : new Date(b.createdAt || 0);
            return dateA - dateB;
          });
          break;
        default:
          // Kh√¥ng l√†m g√¨ n·∫øu sortBy kh√¥ng kh·ªõp
          break;
      }
    }

    setFilteredProducts(filtered);
  }, [allProducts, searchName, categoryFilter, priceFilter, sortBy]);

  useEffect(() => {
    loadData();
  }, []);

  // S·ª≠a dependency - th√™m filterProducts v√†o dependency array
  useEffect(() => {
    filterProducts();
  }, [filterProducts]);

  const loadData = async () => {
    try {
      const [productsData, categoriesData] = await Promise.all([
        getProducts(),
        getCategories(),
      ]);
      setAllProducts(productsData);
      setCategories(categoriesData);
    } catch (error) {
      console.error("Error loading data:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteProduct = async (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y?")) {
      try {
        await deleteProduct(id);
        loadData();
        alert("‚úÖ S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!");
      } catch (error) {
        alert("‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m: " + error.message);
      }
    }
  };

  const clearSearch = () => {
    setSearchName("");
    setCategoryFilter("");
    setPriceFilter("");
    setSortBy("");
  };

  if (loading) {
    return <div className="loading">ƒêang t·∫£i s·∫£n ph·∫©m...</div>;
  }

  return (
    <div className="product-list-container" style={{ with: "100%" }}>
      <div className="search-section">
        <h3>üîç T√¨m ki·∫øm s·∫£n ph·∫©m</h3>
        <div className="search-controls">
          <div className="form-group">
            <label htmlFor="searchName">T√™n s·∫£n ph·∫©m</label>
            <input
              id="searchName"
              type="text"
              value={searchName}
              onChange={(e) => setSearchName(e.target.value)}
              className="form-control"
              placeholder="Nh·∫≠p t√™n s·∫£n ph·∫©m b·∫°n mu·ªën t√¨m..."
            />
          </div>

          <div className="form-group">
            <label htmlFor="categoryFilter">Danh m·ª•c</label>
            <select
              id="categoryFilter"
              value={categoryFilter}
              onChange={(e) => setCategoryFilter(e.target.value)}
              className="form-control"
            >
              <option value="">T·∫•t c·∫£ danh m·ª•c</option>
              {categories.map((category) => (
                <option key={category.id} value={category.id}>
                  {category.name}
                </option>
              ))}
            </select>
          </div>

          <div className="form-group">
            <label htmlFor="priceFilter">Kho·∫£ng gi√°</label>
            <select
              id="priceFilter"
              value={priceFilter}
              onChange={(e) => setPriceFilter(e.target.value)}
              className="form-control"
            >
              <option value="">T·∫•t c·∫£ gi√°</option>
              <option value="0-100000">D∆∞·ªõi 100k</option>
              <option value="100000-500000">100k - 500k</option>
              <option value="500000-1000000">500k - 1M</option>
              <option value="1000000-5000000">1M - 5M</option>
              <option value="5000000-999999999">Tr√™n 5M</option>
            </select>
          </div>

          <div className="form-group">
            <label htmlFor="sortBy">S·∫Øp x·∫øp</label>
            <select
              id="sortBy"
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
              className="form-control"
            >
              <option value="">M·∫∑c ƒë·ªãnh</option>
              <option value="name-asc">T√™n A-Z</option>
              <option value="name-desc">T√™n Z-A</option>
              <option value="price-asc">Gi√° th·∫•p ƒë·∫øn cao</option>
              <option value="price-desc">Gi√° cao ƒë·∫øn th·∫•p</option>
              <option value="newest">M·ªõi nh·∫•t</option>
              <option value="oldest">C≈© nh·∫•t</option>
            </select>
          </div>

          <div className="form-group">
            <label>&nbsp;</label>
            <button onClick={clearSearch} className="btn btn-secondary">
              üóëÔ∏è X√≥a b·ªô l·ªçc
            </button>
          </div>
        </div>

        <div className="search-results">
          {filteredProducts.length === allProducts.length
            ? `‚ú® Hi·ªÉn th·ªã t·∫•t c·∫£ ${allProducts.length} s·∫£n ph·∫©m`
            : `üéØ T√¨m th·∫•y ${filteredProducts.length} / ${allProducts.length} s·∫£n ph·∫©m`}
        </div>
      </div>

      <h3 style={{ marginBottom: "20px" }}>üì¶ Danh s√°ch s·∫£n ph·∫©m</h3>
      <div className="product-grid">
        {filteredProducts.map((product) => {
          const category = categories.find(
            (cat) => cat.id === product.category
          );

          return (
            <div key={product.id} className="product-card">
              {product.imageBase64 ? (
                <img
                  src={product.imageBase64}
                  alt={product.name}
                  className="product-image"
                />
              ) : (
                <div className="no-image">Kh√¥ng c√≥ ·∫£nh</div>
              )}

              <div className="product-info">
                <div className="product-content">
                  {category && (
                    <div className="product-category">{category.name}</div>
                  )}
                  <div className="product-name">{product.name}</div>
                  <div className="product-price">
                    {product.price?.toLocaleString("vi-VN")} VND
                  </div>
                  <div
                    className={`product-stock ${
                      product.inStock !== false ? "in-stock" : "out-of-stock"
                    }`}
                  >
                    {product.inStock !== false ? "‚úÖ C√≤n h√†ng" : "‚ùå H·∫øt h√†ng"}
                  </div>
                </div>

                <div className="product-actions">
                  <button
                    onClick={() => onEdit(product)}
                    className="btn btn-warning btn-sm"
                  >
                    S·ª¨A
                  </button>
                  <button
                    onClick={() => handleDeleteProduct(product.id)}
                    className="btn btn-danger btn-sm"
                  >
                    X√ìA
                  </button>
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {filteredProducts.length === 0 && allProducts.length > 0 && (
        <div className="no-products">
          Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ t√¨m ki·∫øm.
        </div>
      )}

      {allProducts.length === 0 && (
        <div className="no-products">Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c th√™m.</div>
      )}
    </div>
  );
}
